"use strict";
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fsPromises_1 = require("./fsPromises");
const fs_1 = require("fs");
const path_1 = require("path");
const fast_glob_1 = __importDefault(require("fast-glob"));
// @ts-ignore
const glob_1 = __importDefault(require("glob"));
const flatten_1 = require("./flatten");
const fromentries_1 = __importDefault(require("fromentries"));
const fast_xml_parser_1 = require("fast-xml-parser");
const findUp_1 = require("./findUp");
const magentoInterop_1 = require("./magentoInterop");
const BalerError_1 = require("./BalerError");
const trace_1 = require("./trace");
const parseTemplateDeps_1 = require("./parseTemplateDeps");
/**
 * @summary Verify all the dirs we need from Magento are available.
 *          Things to be checked should be kept to the essentials
 *          (see: https://github.com/magento/baler/issues/30)
 */
async function findMagentoRoot(dir) {
    trace_1.trace(`looking for magento root starting at ${dir}`);
    const EXPECTED_ENTRIES = ['app', 'vendor', 'pub'];
    const predicate = (dir, entries) => {
        return EXPECTED_ENTRIES.every(e => entries.includes(e));
    };
    return findUp_1.findUp(dir, predicate);
}
exports.findMagentoRoot = findMagentoRoot;
/**
 * @summary Get a list of names for all enabled modules.
 *          We _could_ use a full PHP parser here to be safe,
 *          but `app/etc/config.php` is codegen'd, so the odds
 *          of it not following very specific conventions is small
 */
async function getEnabledModules(magentoRoot) {
    trace_1.trace('reading enabled modules from app/etc/config.php');
    const configPath = path_1.join(magentoRoot, 'app/etc/config.php');
    const rawConfig = await fsPromises_1.readFile(configPath, 'utf8').catch(() => '');
    if (!rawConfig) {
        throw new BalerError_1.BalerError(`Failed to read list of enabled modules from ${configPath}`);
    }
    let [, rawArrayBody = ''] = rawConfig.match(/'modules'\s*=>\s*\[(.+)\]/s) || [];
    if (!rawArrayBody) {
        rawConfig.match(/'modules'\s*=>\s*array\((.+)\)/s) || [];
    }
    const items = rawArrayBody.split(',').map(t => t.trim());
    const enabledModules = [];
    for (const item of items) {
        const [, name = '', enabledStr = ''] = item.match(/'(\w+)'\s*=>\s*([01])/) || [];
        if (name && Number(enabledStr))
            enabledModules.push(name);
    }
    trace_1.trace(`enabled modules: ${JSON.stringify(enabledModules)}`);
    return enabledModules;
}
exports.getEnabledModules = getEnabledModules;
async function getComponents(magentoRoot) {
    const componentPaths = await magentoInterop_1.getModulesAndThemesFromMagento(magentoRoot);
    return {
        themes: await getThemesFromPaths(componentPaths.themes),
        modules: getModulesFromPaths(componentPaths.modules),
    };
}
exports.getComponents = getComponents;
async function getThemesFromPaths(themePaths) {
    const pendingThemes = Object.entries(themePaths).map(async ([fullID, path]) => {
        const [area, vendor, name] = fullID.split('/');
        const themeID = `${vendor}/${name}`;
        const theme = {
            name,
            vendor,
            area: area,
            themeID,
            path,
            parentID: await getThemeParentName(path),
        };
        return [themeID, theme];
    });
    return fromentries_1.default(await Promise.all(pendingThemes));
}
function getModulesFromPaths(modulePaths) {
    return fromentries_1.default(Object.entries(modulePaths).map(([moduleID, path]) => {
        const mod = {
            moduleID,
            path: path,
        };
        return [moduleID, mod];
    }));
}
/**
 * @summary Get a list of all _deployed_ frontend and adminhtml themes
 *          for all vendors
 */
async function getDeployedThemes(magentoRoot) {
    trace_1.trace('checking pub/static for deployed themes');
    const staticRoot = path_1.join(magentoRoot, 'pub', 'static');
    const [frontendVendors, adminVendors] = await Promise.all([
        getDirEntriesAtPath(path_1.join(staticRoot, 'frontend')),
        getDirEntriesAtPath(path_1.join(staticRoot, 'adminhtml')),
    ]);
    const pendingFrontendThemes = Promise.all(frontendVendors.map(v => getDeployedThemesForVendor(magentoRoot, 'frontend', v)));
    const pendingAdminThemes = Promise.all(adminVendors.map(v => getDeployedThemesForVendor(magentoRoot, 'adminhtml', v)));
    const [frontendThemes, adminThemes] = await Promise.all([
        pendingFrontendThemes,
        pendingAdminThemes,
    ]);
    const deployedThemes = [
        ...flatten_1.flatten(frontendThemes),
        ...flatten_1.flatten(adminThemes),
    ];
    trace_1.trace(`found deployed themes: ${deployedThemes}`);
    return deployedThemes;
}
exports.getDeployedThemes = getDeployedThemes;
/**
 * @summary Get an unordered list of all .phtml files for a specific
 *          area (frontend/adminhtml/base) for enabled modules only
 * @todo Switch from fast-glob to manual recursive crawling of the fs.
 *       Globbing has too much of a perf penalty
 */
async function getPHTMLFilesEligibleForUseWithTheme(themeHierarchy, enabledModules, modules) {
    const moduleGlobs = enabledModules.map(moduleID => {
        const mod = modules[moduleID];
        return path_1.join(mod.path, 'view', `{${themeHierarchy[0].area},base}`, 'templates', '**/*.phtml');
    });
    const themeGlobs = flatten_1.flatten(enabledModules.map(m => {
        return themeHierarchy.map(t => `${t.path}/${m}/templates/**/*.phtml`);
    }));
    return fast_glob_1.default([...moduleGlobs, ...themeGlobs], {
        onlyFiles: true,
    });
}
exports.getPHTMLFilesEligibleForUseWithTheme = getPHTMLFilesEligibleForUseWithTheme;
async function getLayoutFilesEligibleForUseWithTheme(themeHierarchy, enabledModules, modules) {
    const promises = [];
    const globbyCallback = (resolve, reject) => (err, files) => {
        if (err) {
            console.log(err);
            reject(err);
        }
        else {
            console.log(files);
            resolve(files);
        }
    };
    for (const enabledModule of enabledModules) {
        const mod = modules[enabledModule];
        if (mod) {
            promises.push(new Promise((resolve, reject) => {
                glob_1.default(path_1.join(mod.path, 'view', themeHierarchy[0].area, 'layout', '*.xml'), globbyCallback(resolve, reject));
            }));
            promises.push(new Promise((resolve, reject) => {
                glob_1.default(path_1.join(mod.path, 'view', 'base', 'layout', '*.xml'), globbyCallback(resolve, reject));
            }));
            for (const theme of themeHierarchy) {
                promises.push(new Promise((resolve, reject) => {
                    glob_1.default(path_1.join(theme.path, enabledModule, 'layout', '*.xml'), globbyCallback(resolve, reject));
                }));
            }
        }
    }
    const filePaths = await Promise.all(promises);
    let allPaths = [];
    for (const filePathsArray of filePaths) {
        // @ts-ignore
        allPaths = allPaths.concat(filePathsArray);
    }
    return allPaths;
}
exports.getLayoutFilesEligibleForUseWithTheme = getLayoutFilesEligibleForUseWithTheme;
;
async function getPHTMLFilesFromLayoutHandle(layoutFile, themeHierarchy, modules) {
    const templates = [];
    // Read layout file
    const layoutXml = await fsPromises_1.readFile(layoutFile, 'utf8').catch(() => '');
    // Get phtml files
    let matches = layoutXml.match(/template="(.*?)"/g);
    if (matches) {
        const matchesArray = matches.map(match => match.match(/"(.*?)"/));
        for (const match of matchesArray) {
            if (match instanceof Array) {
                templates.push(match[1]);
            }
        }
    }
    // Convert phtml files into file paths
    return templates
        // Fully qualified only
        .filter(template => template.split('::').length > 1)
        // Resolve path
        .map(template => {
        const [moduleName, file] = template.split('::');
        const fallbackPaths = themeHierarchy
            .map(theme => `${theme.path}/${moduleName}/templates/${file}`);
        fallbackPaths.push(`${modules[moduleName].path}/view/${themeHierarchy[0].area}/templates/${file}`);
        fallbackPaths.push(`${modules[moduleName].path}/view/base/templates/${file}`);
        for (const fallback of fallbackPaths) {
            try {
                const found = fs_1.statSync(fallback);
                return fallback;
            }
            catch (err) { }
        }
        return '';
    })
        // Remove templates that we couldn't find
        .filter((template) => template.length > 0);
}
exports.getPHTMLFilesFromLayoutHandle = getPHTMLFilesFromLayoutHandle;
;
async function getDepsFromPHTMLPath(templateFile) {
    const templateContent = await fsPromises_1.readFile(templateFile, 'utf8').catch(() => '');
    const { deps } = parseTemplateDeps_1.parseTemplateDeps(templateContent);
    return deps || [];
}
exports.getDepsFromPHTMLPath = getDepsFromPHTMLPath;
async function getLocalesForDeployedTheme(magentoRoot, theme) {
    trace_1.trace(`fetching deployed locales for ${theme.themeID}`);
    const themeRoot = path_1.join(magentoRoot, getStaticDirForTheme(theme));
    const dirs = await getDirEntriesAtPath(themeRoot);
    // filter out any extra files/folders that aren't locales
    const reLang = /^[a-z]{2}(?:_[a-z]{2})?$/i;
    const locales = dirs.filter(d => reLang.test(d));
    trace_1.trace(`found deployed locales for ${theme.themeID}: ${JSON.stringify(locales)}`);
    return locales;
}
exports.getLocalesForDeployedTheme = getLocalesForDeployedTheme;
function getStaticDirForTheme(theme) {
    // Can't use `vendor` prop from Theme, because the casing
    // might be different. Magento always uses the theme ID when
    // writing to `pub/static`. We have to split here, though,
    // so that *nix path separators don't make it in (need windows compat)
    const [vendor, name] = theme.themeID.split('/');
    return path_1.join('pub', 'static', theme.area, vendor, name);
}
exports.getStaticDirForTheme = getStaticDirForTheme;
async function getThemeParentName(themePath) {
    trace_1.trace(`checking for parent of theme at ${themePath}`);
    const themeXMLPath = path_1.join(themePath, 'theme.xml');
    const source = await fsPromises_1.readFile(themeXMLPath, 'utf8').catch(() => '');
    if (!source) {
        throw new BalerError_1.BalerError(`Could not find theme configuration (theme.xml) for theme at "${themeXMLPath}"`);
    }
    const parsedThemeConfig = fast_xml_parser_1.parse(source, {
        ignoreAttributes: false,
        attributeNamePrefix: '',
        ignoreNameSpace: true,
    });
    const parent = parsedThemeConfig.theme.parent || '';
    trace_1.trace(parent
        ? `found parent of ${parent} for theme at ${themePath}`
        : `no parent found for theme at path ${themePath}`);
    return parent;
}
async function getDeployedThemesForVendor(magentoRoot, area, vendor) {
    const vendorPath = path_1.join(magentoRoot, 'pub', 'static', area, vendor);
    const vendorEntries = await getDirEntriesAtPath(vendorPath);
    const themeNames = vendorEntries.filter(e => /^[a-zA-Z0-9-_]+$/.test(e));
    return themeNames.map(name => `${vendor}/${name}`);
}
const getDirEntriesAtPath = (path) => fsPromises_1.readdir(path, { withFileTypes: true })
    .then(entries => entries.filter(d => d.isDirectory()).map(d => d.name))
    .catch(() => []);
//# sourceMappingURL=data:application/json;base64,