"use strict";
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const requireConfig_1 = require("./requireConfig");
const transformAMD_1 = require("./transformAMD");
const fsPromises_1 = require("./fsPromises");
const magic_string_1 = __importStar(require("magic-string"));
const createRequireResolver_1 = require("./createRequireResolver");
/**
 * @summary Create a bundle file (compatible with the RequireJS runtime)
 *          from a collection of module IDs
 */
async function createBundleFromDeps(bundleName, deps, baseDir, requireConfig, themeID) {
    const resolver = createRequireResolver_1.createRequireResolver(requireConfig);
    const transformedModules = await Promise.all(deps.map(d => getFinalModuleSource(d, baseDir, resolver, requireConfig)));
    // @ts-ignore
    const { bundle, depsWithInvalidShims } = createBundle(transformedModules.filter(mod => !mod.isInvalid));
    if (depsWithInvalidShims) {
        // TODO: surface in CLI at end of run
    }
    const bundleFilename = `${path_1.parse(bundleName).name}.js`;
    const sourcemap = bundle.generateMap({
        source: bundleFilename,
        includeContent: true,
        hires: true,
    });
    return {
        bundleFilename,
        bundle: bundle.toString(),
        map: sourcemap.toString(),
    };
}
exports.createBundleFromDeps = createBundleFromDeps;
// DO NOT BUNDLE THESE
const blacklistedDeps = [
    'prototype'
];
async function getFinalModuleSource(dep, baseDir, resolver, requireConfig) {
    const resolvedDep = resolver(dep);
    const path = path_1.join(baseDir, resolvedDep.modulePath);
    let source;
    try {
        if (blacklistedDeps.includes(dep)) {
            console.log(`Ignoring ${dep}`);
            throw new Error('No.');
        }
        source = await fsPromises_1.readFile(path, 'utf8');
    }
    catch (err) {
        return { dep, file: '', isInvalid: true };
    }
    const isText = resolvedDep.pluginID === 'text';
    const shims = requireConfig_1.getShimsForModule(dep, requireConfig);
    const hasDefine = transformAMD_1.isAMDWithDefine(source);
    const isNamed = transformAMD_1.isNamedAMD(source);
    const hasInvalidShim = hasDefine && !!shims;
    if (isText) {
        return { dep, file: transformAMD_1.wrapTextModule(dep, source), hasInvalidShim };
    }
    if (isNamed) {
        return { dep, file: new magic_string_1.default(source), hasInvalidShim };
    }
    if (!hasDefine) {
        if (shims) {
            return {
                dep,
                file: transformAMD_1.wrapShimmedModule(dep, source, shims),
                hasInvalidShim,
            };
        }
        if (!shims) {
            return {
                dep,
                file: transformAMD_1.wrapNonShimmedModule(dep, source),
                hasInvalidShim,
            };
        }
    }
    return { dep, file: transformAMD_1.renameModule(dep, source), hasInvalidShim };
}
function createBundle(modules) {
    const bundle = new magic_string_1.Bundle();
    const depsWithInvalidShims = [];
    bundle.prepend(`/* Generated by @magento/baler - ${new Date().toISOString()} */\n\n`);
    for (const { dep, file, hasInvalidShim } of modules) {
        bundle.addSource({
            filename: `../${dep}.js`,
            content: file,
        });
        if (hasInvalidShim)
            depsWithInvalidShims.push(dep);
    }
    return { bundle, depsWithInvalidShims };
}
//# sourceMappingURL=data:application/json;base64,