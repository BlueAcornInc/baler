"use strict";
/**
 * Copyright Â© Magento, Inc. All rights reserved.
 * See COPYING.txt for license details.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = require("path");
const createMinifier_1 = require("./createMinifier");
const magentoFS_1 = require("./magentoFS");
const requireConfig_1 = require("./requireConfig");
const traceAMDDependencies_1 = require("./traceAMDDependencies");
const computeDepsForBundle_1 = require("./computeDepsForBundle");
const createBundleFromDeps_1 = require("./createBundleFromDeps");
const fsPromises_1 = require("./fsPromises");
const flatten_1 = require("./flatten");
const cliTask_1 = require("./cliTask");
const BalerError_1 = require("./BalerError");
const BALER_META_DIR = 'balerbundles';
/**
 * @summary Optimize all eligible themes in a Magento 2 store
 */
async function optimizeThemes(magentoRoot, store, themesToOptimize) {
    // Spins up a worker pool, so we only want to do it once, not per-theme
    const minifier = createMinifier_1.createMinifier();
    const pendingThemeResults = themesToOptimize.map(async (themeID) => {
        const theme = getThemeByID(themeID, store.components.themes);
        throwOnDisallowedTheme(theme);
        try {
            const result = await optimizeTheme(magentoRoot, store, theme, minifier);
            return { themeID, success: true, result };
        }
        catch (error) {
            return { themeID, success: false, error };
        }
    });
    const themeResults = await Promise.all(pendingThemeResults);
    minifier.destroy();
    return themeResults;
}
exports.optimizeThemes = optimizeThemes;
/**
 * @summary Optimize a single theme in a Magento 2 store
 */
async function optimizeTheme(magentoRoot, store, theme, minifier) {
    const coreBundleResults = await createCoreBundle(magentoRoot, theme, minifier);
    return coreBundleResults;
}
async function getLayoutBasedDeps(magentoRoot, theme) {
    const enabledModules = await magentoFS_1.getEnabledModules(magentoRoot);
    const { modules, themes } = await magentoFS_1.getComponents(magentoRoot);
    const themeFallback = [];
    let processing = true;
    let currentFallback = theme;
    // Create theme fallback
    while (processing) {
        themeFallback.push(currentFallback);
        if (currentFallback.parentID) {
            currentFallback = themes[currentFallback.parentID];
        }
        else {
            processing = false;
        }
    }
    console.log(themeFallback);
    console.log(enabledModules);
    console.log(modules);
    // Get all layout files
    const layoutFiles = await magentoFS_1.getLayoutFilesEligibleForUseWithTheme(themeFallback, enabledModules, modules);
    // Logging to figure out if a glob is failing on cloud
    console.log(layoutFiles);
    // Create a map of layout file => templateFiles[]
    const layoutToTemplatesMap = new Map();
    // Create a map of layout file => js[]
    const layoutToDepsMap = new Map();
    for (const layoutFile of layoutFiles) {
        let layoutHandle = layoutFile.split('/').pop();
        if (!layoutHandle) {
            continue;
        }
        else {
            layoutHandle = layoutHandle.replace('.xml', '');
        }
        if (!layoutToTemplatesMap.has(layoutHandle)) {
            layoutToTemplatesMap.set(layoutHandle, new Set());
        }
        if (!layoutToDepsMap.has(layoutHandle)) {
            layoutToDepsMap.set(layoutHandle, new Set());
        }
        const templatesSet = layoutToTemplatesMap.get(layoutHandle);
        const templates = await magentoFS_1.getPHTMLFilesFromLayoutHandle(layoutFile, themeFallback, modules);
        for (const template of templates) {
            templatesSet.add(template);
        }
        layoutToTemplatesMap.set(layoutHandle, templatesSet);
    }
    // Iterate over each layout handle
    for (const [handle, templatesSet] of layoutToTemplatesMap) {
        // Iterate over each templateFile
        for (const template of Array.from(templatesSet)) {
            const depsForLayoutHandle = layoutToDepsMap.get(handle);
            // @ts-ignore
            const depsForTemplate = await magentoFS_1.getDepsFromPHTMLPath(template);
            for (const dep of depsForTemplate) {
                depsForLayoutHandle.add(dep);
            }
            layoutToDepsMap.set(handle, depsForLayoutHandle);
        }
    }
    return layoutToDepsMap;
    // read the phtml file,
    // gather the dependencies
    // create the bundle
}
/**
 * @summary Creates and writes the core bundle file for a given theme
 */
async function createCoreBundle(magentoRoot, theme, minifier) {
    const deployedLocales = await magentoFS_1.getLocalesForDeployedTheme(magentoRoot, theme);
    const [firstLocale] = deployedLocales;
    const firstLocaleRoot = path_1.join(magentoRoot, magentoFS_1.getStaticDirForTheme(theme), firstLocale);
    const { requireConfig, rawRequireConfig } = await requireConfig_1.getRequireConfigFromDir(firstLocaleRoot);
    let entryPoints = getEntryPointsFromConfig(requireConfig, theme.themeID);
    const layoutDeps = await getLayoutBasedDeps(magentoRoot, theme);
    // Combine default.xml deps with core bundle
    const defaultDeps = layoutDeps.get('default');
    if (defaultDeps) {
        entryPoints = entryPoints.concat(Array.from(defaultDeps));
        layoutDeps.delete('default');
    }
    const { graph, resolvedEntryIDs } = await traceAMDDependencies_1.traceAMDDependencies(entryPoints, requireConfig, firstLocaleRoot);
    const coreBundleDeps = computeDepsForBundle_1.computeDepsForBundle(graph, resolvedEntryIDs);
    const endBundleTask = cliTask_1.cliTask(`Create core bundle file`, theme.themeID);
    const { bundle, bundleFilename, map } = await createBundleFromDeps_1.createBundleFromDeps('core-bundle', coreBundleDeps, firstLocaleRoot, requireConfig, theme.themeID);
    endBundleTask(`Created core bundle file`);
    // Create bundles for all other layout xml handles
    const otherBundles = new Map();
    const otherBundlesOutput = [];
    for (const [layoutHandle, entryPoints] of layoutDeps) {
        const { graph, resolvedEntryIDs } = await traceAMDDependencies_1.traceAMDDependencies(Array.from(entryPoints), requireConfig, firstLocaleRoot);
        const layoutBundleDeps = computeDepsForBundle_1.computeDepsForBundle(graph, resolvedEntryIDs).filter(dep => !coreBundleDeps.includes(dep));
        // Only create bundles for handles that have dependencies
        if (layoutBundleDeps.length > 0) {
            const endLayoutBundleTask = cliTask_1.cliTask(`Creating bundle for: ${layoutHandle}`, theme.themeID);
            otherBundles.set(layoutHandle, layoutBundleDeps);
            const { bundle, bundleFilename, map } = await createBundleFromDeps_1.createBundleFromDeps(`core-${layoutHandle}`, layoutBundleDeps, firstLocaleRoot, requireConfig, theme.themeID);
            otherBundlesOutput.push([bundle, bundleFilename, map]);
            endLayoutBundleTask(`Creating bundle for: ${layoutHandle}`);
        }
    }
    const newRequireConfig = requireConfig_1.generateBundleRequireConfig(rawRequireConfig, 'core-bundle', coreBundleDeps, otherBundles);
    const endMinifyTask = cliTask_1.cliTask(`Minify core bundle and RequireJS config`, theme.themeID);
    const [minifiedCoreBundle, minifiedRequireConfig, ...otherMinifiedBundles] = await Promise.all([
        minifier.minifyFromString(bundle, bundleFilename, map),
        minifier.minifyFromString(newRequireConfig, 'requirejs-bundle-config.js'),
        // @ts-ignore
        ...otherBundlesOutput.map(otherBundleOutput => minifier.minifyFromString(...otherBundleOutput))
    ]);
    const coreBundleSizes = {
        beforeMin: Buffer.from(bundle).byteLength,
        afterMin: Buffer.from(minifiedCoreBundle.code).byteLength,
    };
    const requireConfigSizes = {
        beforeMin: Buffer.from(rawRequireConfig).byteLength,
        afterMin: Buffer.from(minifiedRequireConfig.code).byteLength,
    };
    endMinifyTask(`Minified core bundle and RequireJS`);
    const files = [
        {
            pathFromLocaleRoot: path_1.join(BALER_META_DIR, bundleFilename),
            source: minifiedCoreBundle.code,
        },
        {
            pathFromLocaleRoot: path_1.join(BALER_META_DIR, `${bundleFilename}.map`),
            source: minifiedCoreBundle.map,
        },
        {
            pathFromLocaleRoot: 'requirejs-bundle-config.js',
            source: minifiedRequireConfig.code,
        },
        {
            pathFromLocaleRoot: 'requirejs-bundle-config.js.map',
            source: minifiedRequireConfig.map,
        },
    ];
    let idx = 0;
    for (const [, otherBundleFileName] of otherBundlesOutput) {
        const minifiedBundle = otherMinifiedBundles[idx];
        files.push({
            pathFromLocaleRoot: path_1.join(BALER_META_DIR, otherBundleFileName),
            // @ts-ignore
            source: minifiedBundle.code
        });
        files.push({
            pathFromLocaleRoot: path_1.join(BALER_META_DIR, `${otherBundleFileName}.map`),
            // @ts-ignore
            source: minifiedBundle.map
        });
        idx++;
    }
    await writeFilesToAllLocales(magentoRoot, theme, files, deployedLocales);
    return {
        baseLocale: firstLocale,
        entryPoints: resolvedEntryIDs,
        graph,
        coreBundleSizes,
        requireConfigSizes,
    };
}
async function writeFilesToAllLocales(magentoRoot, theme, files, locales) {
    const staticDir = magentoFS_1.getStaticDirForTheme(theme);
    const pendingWrites = flatten_1.flatten(files.map(file => {
        return locales.map(async (locale) => {
            const path = path_1.join(magentoRoot, staticDir, locale, file.pathFromLocaleRoot);
            await writeFileWithMkDir(path, file.source);
        });
    }));
    await Promise.all(pendingWrites);
}
async function writeFileWithMkDir(path, source) {
    const dir = path_1.dirname(path);
    await fsPromises_1.mkdir(dir, { recursive: true });
    await fsPromises_1.writeFile(path, source);
}
function getThemeByID(themeID, themes) {
    const theme = themes[themeID];
    if (!theme) {
        throw new BalerError_1.BalerError(`Attempted to optimize "${themeID}", but it was ` +
            'not found in the store.');
    }
    return theme;
}
function throwOnDisallowedTheme(theme) {
    if (theme.area !== 'frontend') {
        throw new BalerError_1.BalerError(`Cannot optimize theme "${theme.themeID}" ` +
            'because only "frontend" themes are supported by baler');
    }
    if (theme.themeID === 'Magento/blank') {
        // Only reason we're doing this check is because it's likely
        // a mistake 99.9% of the time if you try to bundle blank
        throw new BalerError_1.BalerError(`Optimization of "Magento/blank" is not supported`);
    }
}
function getEntryPointsFromConfig(requireConfig, themeID) {
    const entries = requireConfig.deps;
    if (Array.isArray(entries) && entries.length) {
        return entries;
    }
    throw new BalerError_1.BalerError(`Could not find any entry points ("deps") config in ` +
        `"requirejs-config.js" for theme "${themeID}"`);
}
//# sourceMappingURL=data:application/json;base64,