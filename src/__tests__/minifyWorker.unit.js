const { join, basename } = require('path');
const { copyFile } = require('../fsPromises');
const { minifyFromFilepath, minifyFromString } = require('../minifyWorker');
const { readFile } = require('../fsPromises');
const tempy = require('tempy');
const { SourceMapConsumer } = require('source-map');

const moveFileToTmpDir = async path => {
    const tmpDir = tempy.directory();
    const filename = basename(path);
    const tmpPath = join(tmpDir, filename);
    await copyFile(path, tmpPath);
    return { tmpPath, tmpDir };
};
const getFixturePath = (fixtureName, path) =>
    join(__dirname, '__fixtures__', fixtureName, path);

test('minifyFromString minifies JS file without chained sourcemap', async () => {
    const js = `
        var abc = () => {
            var c = console;
            c.log('test');
        };
        abc();
    `;
    const result = await minifyFromString(js, 'file.js');
    expect(result.code).toMatchInlineSnapshot(`
                        "var abc=()=>{console.log(\\"test\\")};abc();
                        //# sourceMappingURL=file.js.map"
            `);
    expect(result.map).toBeTruthy();
});

test('minifyFromString minifies JS file with chained sourcemap', async () => {
    // Take code pre-compiled with Babel. Imagine someone runs Babel in static
    // content deployment, before Baler has been run
    const js = `"use strict";

    var b = function b() {
        console.log(undefined.heh);
    };
    "use strict";

    var a = function a() {
        console.log(undefined.lol);
    };`;
    // sourcemap generated by babel
    const map = {
        version: 3,
        sources: ['file.js', 'index.js'],
        names: [],
        mappings:
            ';;AAAA,IAAM,IAAI,SAAJ,CAAI,GAAM;AACZ,YAAQ,GAAR,CAAY,UAAK,GAAjB;AACH,CAFD;;;ACAA,IAAM,IAAI,SAAJ,CAAI,GAAM;AACZ,YAAQ,GAAR,CAAY,UAAK,GAAjB;AACH,CAFD',
        file: 'bundle.js',
        sourcesContent: [
            'const b = () => {\n    console.log(this.heh);\n};',
            'const a = () => {\n    console.log(this.lol);\n};',
        ],
    };
    const result = await minifyFromString(js, 'bundle.js', JSON.stringify(map));
    expect(result.code).toMatchInlineSnapshot(`
        "\\"use strict\\";var b=function(){console.log((void 0).heh)},a=function(){console.log((void 0).lol)};
        //# sourceMappingURL=bundle.js.map"
    `);

    const consumer = await SourceMapConsumer.fromSourceMap(result.map);
    // Verify the original code, from before babel, made it to the sourcemap
    expect(consumer.sourceContentFor('file.js')).toMatchInlineSnapshot(`
        "const b = () => {
            console.log(this.heh);
        };"
    `);
    consumer.destroy();
});

test('minifyFromFilepath minifies JS file', async () => {
    const srcPath = getFixturePath('basic-minify', 'bundle.js');
    const { tmpDir, tmpPath } = await moveFileToTmpDir(srcPath);

    const result = await minifyFromFilepath(tmpPath);
    const resultFilePath = join(tmpDir, result.minFilename);
    const minifiedCode = await readFile(resultFilePath, 'utf8');

    expect(minifiedCode).toMatchInlineSnapshot(
        `"define([\\"a\\"],function(n){console.log(n)});"`,
    );
});

test('minifyFromFilepath minifies JS file and chains sourcemap', async () => {
    const srcPath = getFixturePath('source-mapped-minify', 'bundle.js');
    const { tmpDir, tmpPath } = await moveFileToTmpDir(srcPath);

    const result = await minifyFromFilepath(tmpPath);
    const resultFilePath = join(tmpDir, result.minFilename);
    const minifiedCode = await readFile(resultFilePath, 'utf8');

    expect(minifiedCode).toMatchInlineSnapshot(
        `"define([\\"a\\"],function(n){(0,console.log)(n)});"`,
    );
    // TODO: Assert that sourcemap was chained properly
});
