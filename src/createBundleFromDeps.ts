import { log } from './log';
import { extname, parse, join } from 'path';
import { getShimsForModule } from './requireConfig';
import {
    wrapTextModule,
    isNamedAMD,
    isAMDWithDefine,
    wrapShimmedModule,
    wrapNonShimmedModule,
    renameModule,
} from './transformAMD';
import { readFile } from './fsPromises';
import { MagentoRequireConfig } from './types';
import MagicString, { Bundle } from 'magic-string';
import { createRequireResolver } from './createRequireResolver';

/**
 * @summary Create a bundle file (compatible with the RequireJS runtime)
 *          from a collection of module IDs
 */
export async function createBundleFromDeps(
    bundleName: string,
    deps: string[],
    baseDir: string,
    requireConfig: MagentoRequireConfig,
) {
    const resolver = createRequireResolver(requireConfig);
    const transformedModules = await Promise.all(
        deps.map(d =>
            getFinalModuleSource(d, baseDir, resolver, requireConfig),
        ),
    );
    const bundle = createBundle(transformedModules);
    const bundleFilename = `${parse(bundleName).name}.js`;
    const sourcemap = bundle.generateMap({
        source: bundleFilename,
        includeContent: true,
        hires: true,
    });

    return {
        bundleFilename,
        bundle: bundle.toString(),
        map: sourcemap.toString(),
    };
}

async function getFinalModuleSource(
    dep: string,
    baseDir: string,
    resolver: ReturnType<typeof createRequireResolver>,
    requireConfig: MagentoRequireConfig,
) {
    const path = join(baseDir, resolver(dep).modulePath);
    const source = await readFile(path, 'utf8');
    const isHTML = extname(path) === '.html';
    const shims = getShimsForModule(dep, requireConfig);
    const hasDefine = isAMDWithDefine(source);
    const isNamed = isNamedAMD(source);

    if (isHTML) {
        return { dep, file: wrapTextModule(dep, source) };
    }

    if (isNamed) {
        return { dep, file: new MagicString(source) };
    }

    if (hasDefine && shims) {
        // Note from the RequireJS docs:
        //      "Remember: only use shim config for non-AMD scripts,
        //      scripts that do not already call define(). The shim
        //      config will not work correctly if used on AMD scripts,
        //      in particular, the exports and init config will not
        //      be triggered, and the deps config will be confusing
        //      for those cases."
        // - https://requirejs.org/docs/api.html#config-shim
        log.warn(
            `Found shim configuration for "${dep}", but it ` +
                'is already an AMD module. RequireJS does not support ' +
                'shimming AMD modules. You may see unexpected behavior ' +
                'as a result.',
        );
    }

    if (!hasDefine) {
        if (shims) {
            return { dep, file: wrapShimmedModule(dep, source, shims) };
        }

        if (!shims) {
            return { dep, file: wrapNonShimmedModule(dep, source) };
        }
    }

    return { dep, file: renameModule(dep, source) };
}

function createBundle(modules: { dep: string; file: MagicString }[]) {
    const bundle = new Bundle();
    bundle.prepend(`/* Generated by @magento/baler - ${Date()} */\n\n`);
    for (const { dep, file } of modules) {
        bundle.addSource({
            filename: `../${dep}.js`,
            content: file,
        });
    }
    return bundle;
}
